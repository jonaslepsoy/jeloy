#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('jeloy:server');
var http = require('http');

var beacons = require('../src/beacons.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/* Our Sockets app */
var io = require('socket.io')(server);
var teams = {};

var initTeams = function(){
  teams = {
    "red":  {
        "score": 0,
        "players": []
    },
    "blue": {
        "score": 0,
        "players": []
    }
  };
}
initTeams();

var roles = ["King", "Saboteur", "EMP", "Engineer", "Soldier"];

assignedRoles = {};

// On new connections
io.on('connection', function (socket) {
  console.log('Got a connection');

  socket.on('join', function () {
    var id = socket.id;
    if(teams.blue.players.indexOf(id) === -1 &&Â teams.red.players.indexOf(id) === -1) {
      if(teams.red.players.length > teams.blue.players.length) {
        var roleindex = teams.blue.players.length;
        if (roleindex > roles.length) { roleindex = roles.length - 1 }
        var role = roles[roleindex];
        assignedRoles[id] = role;
        console.log('A player have joined the blue team as ' + role);
        teams.blue.players.push(id);
        socket.emit('joined',{'team': 'blue', 'role': role});
      } else {
        var roleindex = teams.red.players.length;
        if (roleindex > roles.length) { roleindex = roles.length - 1 }
        var role = roles[roleindex];
        assignedRoles[id] = role;
        console.log('A player have joined the red team as ' + role);
        teams.red.players.push(id);
        socket.emit('joined',{'team': 'red', 'role': role});
      }
      io.sockets.emit('teams',teams);
    } else if(teams.blue.players.indexOf(id) > -1) {
        socket.emit('joined',{'error': 'player already joined team blue'});
    } else if(teams.red.players.indexOf(id) > -1) {
        socket.emit('joined',{'error': 'player already joined team red'});
    }
  });

  socket.on('cap', function (beaconName) {
    beacons.addUser(beaconName, socket.id);
  });

  socket.on('reset game', function () {
    console.log('Resetting game');
    beacons.initBeacons();
    initTeams();
    io.sockets.emit('teams',teams);
  });

});

// Main game loop
var game = setInterval(update,1000)

function update(){
    beacons.update(teams);
    // We are done, emit status to all clients
    if (teams.red.score > 200) {
      io.sockets.emit('gameover', {'winner':'red'} );
      clearInterval(game);
    } else if (teams.blue.score > 200) {
      io.sockets.emit('gameover', {'winner':'blue'} );
      clearInterval(game);
    }
    io.sockets.emit('beacons',beacons.items);
    io.sockets.emit('teams',teams);
}
