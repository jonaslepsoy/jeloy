#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('jeloy:server');
var http = require('http');

var beacons = require('../src/beacons.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/* Our Sockets app */
var io = require('socket.io')(server);

var teams = {};


// Init teams and the server
function init() {
   teams = {
    "red":  {
      "score": 0,
      "players": []
    },
    "blue": {
      "score": 0,
      "players": []
    }
  };


  /*
  // Set up Socket.IO to listen on port 8000
	socket = io.listen(8000);

	// Start listening for events
	setEventHandlers();*/
}

// Init game state
init();

// On new connections
io.on('connection', function (socket) {
  console.log('Got a connection');

  socket.on('join', function () {
    var id = socket.id;
    if(teams.red.players.length > teams.blue.players.length) {
      console.log('A player have joined the blue team');
      teams.blue.players.push(id);
      socket.emit('joined',{'msg': 'joined team blue'});
    } else {
      console.log('A player have joined the red team');
      teams.red.players.push(id);
      socket.emit('joined',{'msg': 'joined team red'});
    }
    io.sockets.emit('teams',teams);
  });

  socket.on('cap', function (beaconName) {
    console.log(socket.id, beaconName);
    beacons.items[beaconName].cappers.push(socket.id);
    console.log(beacons.items);
  });

  socket.on('list teams', function () {
    io.sockets.emit('teams',teams);
  });

  socket.on('reset game', function () {
    console.log('Resetting game');
    init();
    io.sockets.emit('teams',teams);
  });

});

// Main game loop
setInterval(update,1000)

function update(){
    beacons.update(teams);
    // We are done, emit status to all clients
    io.sockets.emit('beacons',beacons.items);
}
